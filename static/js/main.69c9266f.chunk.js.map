{"version":3,"sources":["serviceWorker.js","components/Statistics.js","Superhero.js","index.js"],"names":["Boolean","window","location","hostname","match","Statistics","team","size","avg","arr","Math","floor","reduce","a","b","key","map","powerstats","combat","durability","strength","speed","power","intelligence","className","style","width","Superhero","props","handleChange","bind","updateTeam","saveTeam","clearTeam","state","superheroList","teamList","search","fetch","then","data","json","superheroJSON","localStorage","getItem","JSON","parse","name","images","id","setState","catch","e","console","error","target","value","this","heroID","parseInt","prevState","hero","filter","isOnTeam","some","teamFull","length","concat","warn","setItem","stringify","removeItem","img","sm","type","onClick","backgroundImage","Fragment","Array","keys","idx","htmlFor","onChange","toLowerCase","includes","href","rel","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.69c9266f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst Statistics = ({team, size}) => {\n    const avg = (arr, size) => (Math.floor(arr.reduce((a, b) => (a + b / size), 0))),\n        arr = (key) => team.map(({powerstats}) => (powerstats[key]));\n\n    const combat_arr = arr('combat'),\n        combat = avg(combat_arr, size),\n        durability_arr = arr('durability'),\n        durability = avg(durability_arr, size),\n        strength_arr = arr('strength'),\n        strength = avg(strength_arr, size),\n        speed_arr = arr('speed'),\n        speed = avg(speed_arr, size),\n        power_arr = arr('power'),\n        power = avg(power_arr, size),\n        intelligence_arr = arr('intelligence'),\n        intelligence = avg(intelligence_arr, size);\n\n    return (\n        <div className=\"powerstats\">\n            <div className=\"stat\">\n                <span className=\"statName\">Combat</span>\n                <span className=\"statBar\" style={{width: `${combat}%`}} />\n                <span className=\"statPct\">{combat}%</span>\n            </div>\n            <div className=\"stat\">\n                <span className=\"statName\">Durability</span>\n                <span className=\"statBar\" style={{width: `${durability}%`}} />\n                <span className=\"statPct\">{durability}%</span>\n            </div>\n            <div className=\"stat\">\n                <span className=\"statName\">Strength</span>\n                <span className=\"statBar\" style={{width: `${strength}%`}} />\n                <span className=\"statPct\">{strength}%</span>\n            </div>\n            <div className=\"stat\">\n                <span className=\"statName\">Speed</span>\n                <span className=\"statBar\" style={{width: `${speed}%`}} />\n                <span className=\"statPct\">{speed}%</span>\n            </div>\n            <div className=\"stat\">\n                <span className=\"statName\">Intelligence</span>\n                <span className=\"statBar\" style={{width: `${intelligence}%`}} />\n                <span className=\"statPct\">{intelligence}%</span>\n            </div>\n            <div className=\"stat\">\n                <span className=\"statName\">Power</span>\n                <span className=\"statBar\" style={{width: `${power}%`}} />\n                <span className=\"statPct\">{power}%</span>\n            </div>\n        </div>\n    );\n};\n\nexport default Statistics;\n","import React from 'react';\nimport Statistics from \"./components/Statistics\";\n\nconst API = `https://cdn.rawgit.com/akabab/superhero-api/0.2.0/api/all.json`;\nconst TEAM_SIZE = 4;\nconst TEAM = 'team';\nexport default class Superhero extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.updateTeam = this.updateTeam.bind(this);\n        this.saveTeam = this.saveTeam.bind(this);\n        this.clearTeam = this.clearTeam.bind(this);\n\n        this.state = {\n            superheroList: [],\n            teamList: [],\n            search: ''\n        };\n    }\n\n    componentDidMount() {\n        // Grab data from the API, and check to see if there is an existing team in Local Storage\n        fetch(API)\n            .then((data) => (data.json()))\n            .then((superheroJSON) => {\n                const teamList = (localStorage.getItem(TEAM)) ? JSON.parse(localStorage.getItem(TEAM)) : [],\n                    superheroList = superheroJSON\n                        .map(({name, images, id, powerstats}) => ({name, images, id, powerstats}));\n                this.setState(() => ({superheroList, teamList}));\n            })\n            .catch((e) => console.error('ERROR: ', e));\n    }\n\n    handleChange({target: {name, value}}) {\n        this.setState(() => ({[name]: value}))\n    }\n\n    updateTeam({target: {name, value}}) {\n        const heroID = parseInt(value);\n        this.setState((prevState) => {\n            switch (name) {\n                case 'ADD': {\n                    /* Before adding, check that:\n                        - Hero isn't already on the team\n                        - Team isn't full\n                    */\n                    const hero = prevState.superheroList.filter(({id}) => (id === heroID)),\n                        isOnTeam = prevState.teamList.some(({id}) => (id === heroID)),\n                        teamFull = (prevState.teamList.length === TEAM_SIZE);\n                    return ({\n                        teamList: (!isOnTeam && !teamFull) ? prevState.teamList.concat(hero) : prevState.teamList\n                    })\n                }\n                case 'REMOVE': {\n                    const teamList = prevState.teamList.filter(({id}) => (id !== heroID));\n                    return ({\n                        teamList\n                    })\n                }\n                default:\n                    console.warn('UNKNOWN ACTION', name, value);\n            }\n        })\n    }\n\n    saveTeam() {\n        const {teamList = []} = this.state;\n        localStorage.setItem(TEAM, JSON.stringify(teamList));\n    }\n\n    clearTeam() {\n        localStorage.removeItem(TEAM);\n        this.setState(() => ({teamList: []}));\n    }\n\n    render() {\n        const {teamList, superheroList, search} = this.state;\n        return (\n            <div className=\"superhero\">\n                <header className='superhero-header'>\n                    <h1 className=\"logo\">Team Datto</h1>\n                </header>\n                <main className=\"superhero-body\">\n                    <div className=\"superhero-content\">\n                        <h1>Choose Your Team</h1>\n                        <div className=\"team\">\n                            {\n                                (teamList.length > 0)\n                                    ? teamList.map(({name, images: {sm: img}, id}) => {\n                                        return (\n                                            <button type='button' key={id} value={id} name={'REMOVE'} onClick={this.updateTeam} className=\"hero\" style={{backgroundImage: `url(${img})`}}>\n                                                <p className=\"name\">{name}</p>\n                                            </button>);\n                                    })\n                                    : <React.Fragment>\n                                        {\n                                            [...Array(TEAM_SIZE).keys()].map((idx) => {\n                                                return (<div key={idx} className='empty'><p>Add A Hero</p></div>);\n                                            })\n                                        }\n                                    </React.Fragment>\n                            }\n                            {\n                                (teamList.length > 0 && teamList.length < TEAM_SIZE)\n                                    ? [...Array(TEAM_SIZE - teamList.length).keys()].map((idx) => {\n                                        return (<div key={idx} className='empty'><p>Add A Hero</p></div>);\n                                    })\n                                    : null\n                            }\n                        </div>\n                        {\n                            (teamList.length > 0)\n                                ? <Statistics team={teamList} size={TEAM_SIZE} />\n                                : null\n                        }\n                        <div className=\"search\">\n                            <label htmlFor='search'>Filter by Name: </label>\n                            <input name='search' id='search' type=\"text\" value={search} onChange={this.handleChange} />\n                        </div>\n                        <div className=\"superhero-list\">\n                            {\n                                (superheroList.length > 0)\n                                    ? superheroList\n                                        .filter(({name: heroName}) => (heroName.toLowerCase().includes(search.toLowerCase())))\n                                        .map(({name, images: {sm: img}, id}) => {\n                                            const isOnTeam = teamList.some(({id: heroID}) => (heroID === id));\n                                            return (\n                                                <button type='button' key={id} value={id} name={'ADD'} onClick={this.updateTeam} className={`hero ${(isOnTeam) ? 'onTeam' : ''}`} style={{backgroundImage: `url(${img})`}}>\n                                                    <p className=\"name\">{name}</p>\n                                                </button>);\n                                        })\n                                    : null\n                            }\n                        </div>\n                    </div>\n                    <nav className='superhero-nav'>\n                        <ul>\n                            <li>\n                                <button type='button' className=\"save-team\" onClick={this.saveTeam}>Save Team</button>\n                            </li>\n                            <li>\n                                <button type='button' className=\"clear-team\" onClick={this.clearTeam}>Clear Team</button>\n                            </li>\n                        </ul>\n                    </nav>\n                </main>\n                <footer className='superhero-footer'>\n                    <p>Created by Clint Milner - Source happily lives on <a href=\"https://github.com/clintmilner/superhero\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a></p>\n                </footer>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Superhero.css';\nimport * as serviceWorker from './serviceWorker';\nimport Superhero from \"./Superhero\";\n\nReactDOM.render(<Superhero />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}