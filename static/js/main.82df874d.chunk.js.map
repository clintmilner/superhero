{"version":3,"sources":["serviceWorker.js","components/Statistics.js","Superhero.js","index.js"],"names":["Boolean","window","location","hostname","match","Statistics","team","size","console","log","avg","arr","Math","floor","reduce","a","b","combat","map","powerstats","durability","strength","speed","power","intelligence","className","style","width","Superhero","props","handleChange","bind","updateTeam","state","superheroList","teamList","search","fetch","then","data","json","superheroJSON","name","images","id","setState","catch","e","error","target","value","this","heroID","parseInt","prevState","hero","filter","isOnTeam","some","teamFull","length","concat","img","sm","type","key","onClick","backgroundImage","Fragment","Array","keys","idx","htmlFor","onChange","toLowerCase","includes","href","rel","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.82df874d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst Statistics = ({team, size}) => {\n    console.log(team, size);\n    const avg = (arr, size) => (Math.floor(arr.reduce((a, b) => (a + b / size), 0)));\n\n    const combat_arr = team.map(({powerstats}) => (powerstats['combat'])),\n        combat = avg(combat_arr, size),\n        durability_arr = team.map(({powerstats}) => (powerstats['durability'])),\n        durability = avg(durability_arr, size),\n        strength_arr = team.map(({powerstats}) => (powerstats['strength'])),\n        strength = avg(strength_arr, size),\n        speed_arr = team.map(({powerstats}) => (powerstats['speed'])),\n        speed = avg(speed_arr, size),\n        power_arr = team.map(({powerstats}) => (powerstats['power'])),\n        power = avg(power_arr, size),\n        intelligence_arr = team.map(({powerstats}) => (powerstats['intelligence'])),\n        intelligence = avg(intelligence_arr, size);\n\n    return (\n        <div className=\"powerstats\">\n            <div className=\"stat\">\n                <span className=\"statName\">Combat</span>\n                <span className=\"statBar\" style={{width: `${combat}%`}} />\n                <span className=\"statPct\">{combat}%</span>\n            </div>\n            <div className=\"stat\">\n                <span className=\"statName\">Durability</span>\n                <span className=\"statBar\" style={{width: `${durability}%`}} />\n                <span className=\"statPct\">{durability}%</span>\n            </div>\n            <div className=\"stat\">\n                <span className=\"statName\">Strength</span>\n                <span className=\"statBar\" style={{width: `${strength}%`}} />\n                <span className=\"statPct\">{strength}%</span>\n            </div>\n            <div className=\"stat\">\n                <span className=\"statName\">Speed</span>\n                <span className=\"statBar\" style={{width: `${speed}%`}} />\n                <span className=\"statPct\">{speed}%</span>\n            </div>\n            <div className=\"stat\">\n                <span className=\"statName\">Intelligence</span>\n                <span className=\"statBar\" style={{width: `${intelligence}%`}} />\n                <span className=\"statPct\">{intelligence}%</span>\n            </div>\n            <div className=\"stat\">\n                <span className=\"statName\">Power</span>\n                <span className=\"statBar\" style={{width: `${power}%`}} />\n                <span className=\"statPct\">{power}%</span>\n            </div>\n        </div>\n    );\n};\n\nexport default Statistics;\n","import React from 'react';\nimport Statistics from \"./components/Statistics\";\n\nconst API = `https://cdn.rawgit.com/akabab/superhero-api/0.2.0/api/all.json`;\nconst TEAM_SIZE = 4;\nexport default class Superhero extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.updateTeam = this.updateTeam.bind(this);\n\n        this.state = {\n            superheroList: [],\n            teamList: [],\n            search: ''\n        };\n    }\n\n    componentDidMount() {\n        fetch(API)\n            .then((data) => (data.json()))\n            .then((superheroJSON) => {\n                console.log(superheroJSON[311]);\n                const superheroList = superheroJSON\n                    // .filter(({biography: {publisher = null}}) => (publisher && publisher.includes('Marvel'))) // let's only keep the Marvel superheroes for now\n                    .map(({name, images, id, powerstats}) => ({name, images, id, powerstats}));\n                this.setState(() => ({superheroList}));\n            })\n            .catch((e) => console.error('ERROR: ', e));\n    }\n\n    handleChange({target: {name, value}}){\n        this.setState(() => ({[name]: value}))\n    }\n\n    updateTeam({target: {name, value}}) {\n        const heroID = parseInt(value);\n        this.setState((prevState) => {\n            switch(name) {\n                case 'ADD': {\n                    /* Before adding, check that:\n                        - Hero isn't already on the team\n                        - Team isn't full\n                    */\n                    const hero = prevState.superheroList.filter(({id}) => (id === heroID)),\n                        isOnTeam = prevState.teamList.some(({id}) => (id === heroID)),\n                        teamFull = (prevState.teamList.length === TEAM_SIZE);\n                    return ({\n                        teamList: (!isOnTeam && !teamFull) ? prevState.teamList.concat(hero) : prevState.teamList\n                    })\n                }\n                case 'REMOVE': {\n                    const teamList = prevState.teamList.filter(({id}) => (id !== heroID));\n                    return ({\n                        teamList\n                    })\n                }\n                default: console.log('unknown action', name, value);\n            }\n        })\n    }\n\n    render() {\n        const {teamList, superheroList, search} = this.state;\n        return (\n            <div className=\"superhero\">\n                <header className='superhero-header'>\n                    <h1 className=\"logo\">Marvel</h1>\n                </header>\n                <main className=\"superhero-body\">\n                    <div className=\"superhero-content\">\n                        <h1>Choose Your Team</h1>\n                        <div className=\"team\">\n                            {\n                                (teamList.length > 0)\n                                    ? teamList.map(({name, images: {sm: img}, id}) => {\n                                        return ( <button type='button' key={id} value={id} name={'REMOVE'} onClick={this.updateTeam} className=\"hero\" style={{backgroundImage: `url(${img})`}}>\n                                            <p className=\"name\">{name}</p>\n                                        </button> );\n                                    })\n                                    : <React.Fragment>\n                                        {\n                                            [...Array(TEAM_SIZE).keys()].map((idx) => {\n                                                return (<div key={idx} className='empty'><p>Add A Hero</p></div>);\n                                            })\n                                        }\n                                    </React.Fragment>\n                            }\n                            {\n                                (teamList.length > 0 && teamList.length < TEAM_SIZE)\n                                ? [...Array(TEAM_SIZE - teamList.length).keys()].map((idx) => {\n                                    return (<div key={idx} className='empty'><p>Add A Hero</p></div>);\n                                })\n                                : null\n                            }\n                        </div>\n                        {\n                            (teamList.length > 0)\n                            ? <Statistics team={teamList} size={TEAM_SIZE} />\n                            : null\n                        }\n                        <div className=\"search\">\n                            <label htmlFor='search'>Filter by Name: </label>\n                            <input name='search' id='search' type=\"text\" value={search} onChange={this.handleChange} />\n                        </div>\n                        <div className=\"superhero-list\">\n                            {\n                                (superheroList.length > 0)\n                                    ? superheroList\n                                        .filter(({name: heroName}) => (heroName.toLowerCase().includes(search.toLowerCase())))\n                                        .map(({name, images: {sm: img}, id}) => {\n                                            const isOnTeam = teamList.some(({id: heroID}) => (heroID === id));\n                                        return ( <button type='button' key={id} value={id} name={'ADD'} onClick={this.updateTeam} className={`hero ${(isOnTeam) ? 'onTeam' : ''}`} style={{backgroundImage: `url(${img})`}}>\n                                            <p className=\"name\">{name}</p>\n                                        </button> );\n                                    })\n                                    : null\n                            }\n                        </div>\n                    </div>\n                    <nav className='superhero-nav'>\n                        <ul>\n                            <li>Pick Team</li>\n                            <li>Team Stats</li>\n                        </ul>\n                    </nav>\n                </main>\n                <footer className='superhero-footer'>\n                    <p>Created by Clint Milner - Source happily lives on <a href=\"https://github.com/clintmilner/superhero\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a></p>\n                </footer>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Superhero.css';\nimport * as serviceWorker from './serviceWorker';\nimport Superhero from \"./Superhero\";\n\nReactDOM.render(<Superhero />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}